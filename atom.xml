<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay Chang&#39;s Blog</title>
  
  <subtitle>我的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaychang.cn/"/>
  <updated>2018-01-22T15:45:44.550Z</updated>
  <id>http://jaychang.cn/</id>
  
  <author>
    <name>Jay Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构-线性表的顺序表示与实现</title>
    <link href="http://jaychang.cn/2018/01/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://jaychang.cn/2018/01/22/数据结构-线性表的顺序表示与实现/</id>
    <published>2018-01-22T15:41:57.000Z</published>
    <updated>2018-01-22T15:45:44.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表的抽象数据类型定义"><a href="#线性表的抽象数据类型定义" class="headerlink" title="线性表的抽象数据类型定义"></a>线性表的抽象数据类型定义</h1><p>ADT 线性表(List)</p><p>Data </p><p>​    线性表的数据对象集合为{a1,a2,…,ai,ai+1,…,an-1,an}，每个元素的类型为DataType。其中，除第一个元素a1外，每个元素都有一个直接前驱元素，除最后一个元素an外，每个元素都有一个直接后继元素，数据元素之间的关系是一对一的</p><p>Operation:</p><p>​    initList(List *list): 初始化操作，建立一个空的线性表list</p><p>​    listEmpty(List list):若线性表为空，则返回true,否则返回false</p><p>​    clearList(List *list):将线性表清空</p><p>​    getElement(List list,int i,ElementType *e):获取线性表第i个元素的值，该值赋值给e</p><p>​    locateElement(List list,ElementType e):在线性表中查找与给定e值相等的元素，如果查找成功则返回元素在线性表中的序号，否则返回0</p><p>​    listInsert(List *list,int i,ElementType e):在线性表序号为i处，新建并插入值为e的新元素，插入成功返回TRUE,否则返回FALSE</p><p>​    listDelete(List <em>list,int i,ElementType </em>e):删除线性表中序号为i的元素，并用e来存储元素值返回给调用方，如果删除成功返回TRUE,否则返回FALSE</p><p>注：这个定义对于线性表的顺序存储与链式存储都是适用的</p><h1 id="线性表顺序存储定义"><a href="#线性表顺序存储定义" class="headerlink" title="线性表顺序存储定义"></a>线性表顺序存储定义</h1><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p><p>若存在线性表{a1,a2,…,ai,ai+1,…,an-1,an},LOC表示求地址操作，每个数据元素需要m存储空间，则有LOC(ai+1)=LOC(ai)+m, LOC(ai)=LOC(a1)+(i-1)*m</p><h1 id="线性表顺序存储结构"><a href="#线性表顺序存储结构" class="headerlink" title="线性表顺序存储结构"></a>线性表顺序存储结构</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElementType data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><p>这里，我们就发现线性表顺序存储结构的三个特点</p><ul><li>线性表的最大存储容量：数组长度MAXSIZE</li><li>length当前存储的数据元素的个数，即当前线性表的长度</li><li>存储空间的起始位置：数组data,它的存储位置就是存储空间的存储位置</li></ul><h1 id="线性表顺序存储结构的插入、删除操作"><a href="#线性表顺序存储结构的插入、删除操作" class="headerlink" title="线性表顺序存储结构的插入、删除操作"></a>线性表顺序存储结构的插入、删除操作</h1><p><strong>插入操作算法描述</strong></p><ul><li>检查当前线性表的长度是否等于线性表的最大存储容量，若是则返回FAILURE，然后检查插入位置是否在1至线性表长度+1，若不是则返回FAILURE</li><li>若i &lt;= 线性表长度，意味着需要移动元素，从线性表最后那个元素开始，到第i个元素，每个元素往后移动一个位置</li><li>将要插入的元素填入位置e</li><li>线性表的长度+1</li></ul><p>注意：这里第i个元素，在C语言数组的序号表示为i-1</p><img src="/2018/01/22/数据结构-线性表的顺序表示与实现/01.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listInsert</span><span class="params">(SqList *sqList, <span class="keyword">int</span> i, ElementType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sqList-&gt;length &gt;= MAXSIZE || i &lt; <span class="number">1</span> || i &gt; sqList-&gt;length + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= sqList-&gt;length) &#123;</span><br><span class="line"><span class="comment">// 从最后那个元素到第i个元素每个元素都往后移动一个位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = sqList-&gt;length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--) &#123;</span><br><span class="line">sqList-&gt;data[j + <span class="number">1</span>] = sqList-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将原先第i个元素值替换为e</span></span><br><span class="line">sqList-&gt;data[i - <span class="number">1</span>] = e;</span><br><span class="line"><span class="comment">// 线性表长度+1</span></span><br><span class="line">sqList-&gt;length = sqList-&gt;length + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入操作时间复杂度为O(n)</p><p><strong>删除操作算法描述</strong></p><ul><li>如果删除元素位置不合理，则返回FAILURE</li><li>用e存储要被删除的元素</li><li>如果删除的元素位置不在表尾，则需要移动元素，从第i+1元素开始至第length个元素，每个元素向前移动一个位置</li><li>线性表长度-1</li></ul><img src="/2018/01/22/数据结构-线性表的顺序表示与实现/02.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listDelete</span><span class="params">(SqList *sqList, <span class="keyword">int</span> i, ElementType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt;= sqList-&gt;length + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">*e = sqList-&gt;data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &lt; sqList-&gt;length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">sqList-&gt;data[j] = sqList-&gt;data[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">sqList-&gt;length = sqList-&gt;length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作时间复杂度为O(n)</p><h1 id="线性表顺序存储实现的完整代码"><a href="#线性表顺序存储实现的完整代码" class="headerlink" title="线性表顺序存储实现的完整代码"></a>线性表顺序存储实现的完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILURE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Boolean;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElementType data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(SqList *sqList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!sqList) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">sqList-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Boolean <span class="title">listEmpty</span><span class="params">(SqList *sqList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sqList-&gt;length &gt; <span class="number">0</span> ? FALSE : TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">clearList</span><span class="params">(SqList *sqList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!sqList) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">sqList-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">getElement</span><span class="params">(SqList sqList, <span class="keyword">int</span> i, ElementType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; sqList.length) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">*e = sqList.data[i];</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locateElement</span><span class="params">(SqList sqList, ElementType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sqList.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sqList.data[i] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">listInsert</span><span class="params">(SqList *sqList, <span class="keyword">int</span> i, ElementType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sqList-&gt;length &gt;= MAXSIZE || i &lt; <span class="number">1</span> || i &gt; sqList-&gt;length + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= sqList-&gt;length) &#123;</span><br><span class="line"><span class="comment">// 从最后那个元素到第i个元素每个元素都往后移动一个位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = sqList-&gt;length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--) &#123;</span><br><span class="line">sqList-&gt;data[j + <span class="number">1</span>] = sqList-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将原先第i个元素值替换为e</span></span><br><span class="line">sqList-&gt;data[i - <span class="number">1</span>] = e;</span><br><span class="line"><span class="comment">// 线性表长度+1</span></span><br><span class="line">sqList-&gt;length = sqList-&gt;length + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">listDelete</span><span class="params">(SqList *sqList, <span class="keyword">int</span> i, ElementType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt;= sqList-&gt;length + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">*e = sqList-&gt;data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &lt; sqList-&gt;length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">sqList-&gt;data[j] = sqList-&gt;data[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">sqList-&gt;length = sqList-&gt;length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listPrint</span><span class="params">(SqList *sqList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sqList-&gt;length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sqList-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"length=%d\n"</span>, sqList-&gt;length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqList sqList;</span><br><span class="line">initList(&amp;sqList);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">listInsert(&amp;sqList, i, (ElementType) i);</span><br><span class="line">&#125;</span><br><span class="line">listPrint(&amp;sqList);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"locate the element 3's index = %d"</span>, locateElement(sqList, <span class="number">3</span>));</span><br><span class="line">ElementType deletedElement;</span><br><span class="line">listDelete(&amp;sqList, <span class="number">4</span>, &amp;deletedElement);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"deleted element is %d"</span>, deletedElement);</span><br><span class="line">listPrint(&amp;sqList);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线性表顺序存储的优缺点"><a href="#线性表顺序存储的优缺点" class="headerlink" title="线性表顺序存储的优缺点"></a>线性表顺序存储的优缺点</h1><p><strong>优点</strong></p><ul><li>无需为表示表中的元素之间的逻辑关系，而额外增加存储空间</li><li>可以快速存取表中任一位置的元素，存取元素时间复杂度为O(1)</li></ul><p><strong>缺点</strong></p><ul><li>插入、删除元素时，需要移动大量元素</li><li>当线性表长度变化比较大的时候，难以估计线性表的存储容量</li><li>容易造成存储空间的“碎片”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性表的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#线性表的抽象数据类型定义&quot; class=&quot;headerlink&quot; title=&quot;线性表的抽象数据类型定义&quot;&gt;&lt;/a&gt;线性表的抽象数据类型定义&lt;/h1&gt;&lt;p&gt;ADT 线性表(List)&lt;/p&gt;
&lt;p&gt;Data &lt;/p&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://jaychang.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线性表" scheme="http://jaychang.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud微服务全家桶】03之Eureka控制台的General Info(unavailable-replicas available-replicas显示不正确问题)</title>
    <link href="http://jaychang.cn/2017/09/01/%E3%80%90Spring-Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6%E3%80%9103%E4%B9%8BEureka%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84General-Info-unavailable-replicas-available-replicas%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E7%A1%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://jaychang.cn/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/</id>
    <published>2017-09-01T09:36:30.000Z</published>
    <updated>2018-01-22T15:52:41.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前【Spring Cloud微服务全家桶】之高可用服务注册中心 文章介绍了Eureka Server高可用</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><img src="/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/01.png"><p>观察eureka-peer1，发现unavailable-replicas与available-replicas显示信息不正确，按理说所有eureka节点都启动后，eureka-peer3,eureka-peer2应该出现在available-replicas列表</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/02.png"><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改下每个eureka节点的配置，把自身注册到注册中心</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.instance.prefer-ip-address=false</span><br></pre></td></tr></table></figure><ul><li>eureka-peer1节点的application.properties配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=1011</span><br><span class="line">spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer1</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer2:1012/eureka,http://eureka-peer3:1013/eureka</span><br><span class="line"></span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.instance.prefer-ip-address=false</span><br></pre></td></tr></table></figure><ul><li>eureka-peer2节点的application.properties配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=1012</span><br><span class="line">spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer2</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer3:1013/eureka</span><br><span class="line"></span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.instance.prefer-ip-address=false</span><br></pre></td></tr></table></figure><ul><li>eureka-peer3节点的application.properties配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=1013</span><br><span class="line">spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer3</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer2:1012/eureka</span><br><span class="line"></span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line">eureka.client.register-with-eureka=true</span><br><span class="line">eureka.instance.prefer-ip-address=false</span><br></pre></td></tr></table></figure><p>重启每个eureka节点<br>发现available-replicas栏可以出现了</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/03.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/04.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】03之Eureka控制台的General-Info-unavailable-replicas-available-replicas显示不正确问题/05.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前【Spring Cloud微服务全家桶】之高可用服务注册中心 文章介绍了Eureka Server高可用&lt;/p&gt;
&lt;h1 id=&quot;问题描
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://jaychang.cn/categories/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="http://jaychang.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://jaychang.cn/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud微服务全家桶】02之高可用服务注册中心</title>
    <link href="http://jaychang.cn/2017/09/01/%E3%80%90Spring-Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6%E3%80%9102%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://jaychang.cn/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/</id>
    <published>2017-09-01T06:03:59.000Z</published>
    <updated>2018-01-22T15:52:19.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Spring Cloud微服务全家桶之服务注册、服务发现(Eureka、Consul作为服务注册中心)文中，使用的是单点eureka注册中心。在开发测试环境是可以的，但生产环境强烈不建议用单点eureka注册中心。</p><h1 id="双eureka高可用"><a href="#双eureka高可用" class="headerlink" title="双eureka高可用"></a>双eureka高可用</h1><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/01.png"><p>思路就是每个eureka server通过eureka.client.serviceUrl.defaultZone配置，将自己注册到对方的注册中心。<br>新建一个module项目，建的过程这里省略，名为registry-ha-ms,建完后pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.choosefine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>registry-ha-ms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>registry-ha-ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用@EnableEurekaServer注解启用Eureka注册中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryHaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(RegistryHaApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建两个properties配置文件，分别为application-peer1.properties，application-peer2.properties</p><ul><li>application-peer1.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=1011</span><br><span class="line">spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer1</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer2:1012/eureka</span><br></pre></td></tr></table></figure><ul><li>application-peer2.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=1012</span><br><span class="line">spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer2</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka</span><br></pre></td></tr></table></figure><p>配置本地Hosts域名解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka-peer1</span><br><span class="line">127.0.0.1 eureka-peer2</span><br></pre></td></tr></table></figure><p>在项目目录下使用maven clean package -DskipTests打包，进入target目录，开启两个命令行窗口分别执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar registry-ha-ms-0.0.1-SNAPSHOT --spring.profiles.active=peer1</span><br><span class="line"></span><br><span class="line">java -jar registry-ha-ms-0.0.1-SNAPSHOT --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure><p>或者在idea里建两个执行配置</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/02.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/03.png"><p>这样就开启了两个eureka server。</p><p>我们在上一篇文章的基础上，将provider-ms的application.properties修改下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=2103</span><br><span class="line">spring.application.name=provider-ms</span><br><span class="line">#eureka.client.serviceUrl.defaultZone=http://registry-ms.pay-inner.com:1001/eureka</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer2:1012/eureka</span><br></pre></td></tr></table></figure><p>然后再启动ProviderApplication，可以看到PROVIDER-MS 已经注册到eureka-peer1与eureka-peer2上了。且eureka-peer1的replicas节点列表里有eureka-peer2，eureka-peer2的replicas节点列表里有eureka-peer1</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/04.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/05.png"><p>新建一个服务消费项目，名为consumer-ms建完后pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.choosefine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-ms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer-ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改properties资源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=2104</span><br><span class="line">spring.application.name=consumer-ms</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer2:1012/eureka</span><br></pre></td></tr></table></figure><p>@EnableDiscoveryClient启用服务发现客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerMsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(ConsumerMsApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个Controller消费provider-ms提供的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"consume"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">consumeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"provider-ms"</span>);</span><br><span class="line">        String url = <span class="string">"http://"</span>+serviceInstance.getHost()+<span class="string">":"</span>+serviceInstance.getPort()+<span class="string">"/"</span>+<span class="string">"services"</span>;</span><br><span class="line">        System.out.println(serviceInstance.getUri().toString());</span><br><span class="line">        String result = restTemplate.getForObject(url, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里引入了LoadBalancerClient，通过choose方法负载均衡选择一个“provider-ms”的服务实例，再通过restTemplate调用，服务实例的信息存储在ServiceInstance对象中，可以获取到主机名，端口号等信<br>启动ConsumerMsApplication，观察eureka-peer1,eureka-peer2，consumer-ms已经注册了<br><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/06.png"></p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/07.png"><p>此时调用刚才写的consume接口，发现已经能够将注册中心的两个服务实例展示出来了，说明服务间调用成功了</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/08.png"><h1 id="三eureka高可用"><a href="#三eureka高可用" class="headerlink" title="三eureka高可用"></a>三eureka高可用</h1><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/09.png"><p>虽然上面我们以双节点作为例子，但是实际上因负载等原因，我们往往可能需要在生产环境构建多于两个的Eureka Server节点。那么对于如何配置serviceUrl来让集群中的服务进行同步，需要我们更深入的理解节点间的同步机制来做出决策。Eureka Server的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。什么意思呢？不妨我们通过下面的实验来看看会发生什么。场景一：假设我们有3个注册中心，我们将eureka-peer1、eureka-peer2、eureka-peer3各自都将eureka.client.serviceUrl.defaultZone指向另外两个节点。换言之，peer1、peer2、peer3是两两互相注册的。启动三个服务注册中心，并将provider-ms的serviceUrl指向eureka-peer1并启动，可以获得如下图所示的集群效果。</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/10.png"><p>我们在上述双eureka节点高可用的基础上，增加一个application-peer3.properties,并修改3个properties配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">application-peer1.properties</span><br><span class="line"></span><br><span class="line">server.port=1011spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer1eureka.client.serviceUrl.defaultZone=http://eureka-peer2:1012/eureka,http://eureka-peer3:1013/eureka</span><br></pre></td></tr></table></figure><p>application-peer2.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=1012spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer2eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer3:1013/eureka</span><br></pre></td></tr></table></figure><p>application-peer3.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=1013spring.application.name=registry-ha-ms</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-peer3eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer2:1012/eureka</span><br></pre></td></tr></table></figure><p>复制一个，改名RegistryHaApplication-peer3 ，其中Program arguments: –spring.profiles.active=peer3</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/11.png"><p>配置本地Hosts域名解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka-peer1127.0.0.1 eureka-peer2127.0.0.1 eureka-peer3</span><br></pre></td></tr></table></figure><p>分别启动RegistryHaApplication-peer1,RegistryHaApplication-peer2,RegistryHaApplication-peer3</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/11.png"><p>观察eureka-peer1,eureka-peer2,eureka-peer3,每个eureka都已经两两互相注册，且目前没有服务实例注册在注册中心（Instances currently registered with Eureka,No instance available）<br><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/12.png"></p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/13.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/14.png"><p>试验下单边注册一个服务实例，即provider-ms的serviceUrl指向eureka-peer1修改provider-ms项目的application.properties配置，仅仅配置将provider-ms注册到eureka-peer1,然后启动ProviderApplication<br>server.port=2103spring.application.name=provider-ms#eureka.client.serviceUrl.defaultZone=<a href="http://registry-ms.pay-inner.com:1001/eurekaeureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka" target="_blank" rel="noopener">http://registry-ms.pay-inner.com:1001/eurekaeureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka</a><br>观察eureka-peer1,eureka-peer2,eureka-peer3发现provider-ms服务，已经通过eureka-peer1将服务实例信息同步给了eureka-peer2,eureka-peer3</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/15.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/16.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/17.png"><p>进一步，我们再将consumer-ms进行eureka-peer2单边注册</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/18.png"><p>观察eureka-peer1,eureka-peer2,eureka-peer3,此时eureka-peer2同步consumer-ms的服务实例信息到eureka-perr1,eureka-peer3<br><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/19.png"></p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/20.png"><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/21.png"><p>然后我们调用下consumer-ms的consume接口，没有问题</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/22.png"><p>将eureka-peer1 shutdownprovider-ms开始报错，访问不到eureka-peer1</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/23.png"><p>但这并不影响，consumer-ms调用provider-ms</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/24.png"><p>将eureka-peer2 shutdownconsumer-ms开始报错，访问不到eureka-peer2</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/25.png"><p>但丝毫不影响,consumer-ms调用provider-ms,做到了服务注册中心的高可用！（这里有点不严谨，因为即使把所有eureka节点都shutdown，还是可以调用的，服务消费方都会本地缓存服务提供方的地址的，但是如果eureka节点全部shutdown，那么新加入的服务实例就无法感知了）</p><img src="/2017/09/01/【Spring-Cloud微服务全家桶】02之高可用服务注册中心/26.png"><p>不过，不建议每个服务配置单边注册到某个eureka节点，强烈建议，每个服务配置所有eureka节点即provider-ms,consumer-ms的application.properties中的<em>eureka.client.serviceUrl.defaultZone</em>配成所有eureka节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka-peer1:1011/eureka,http://eureka-peer2:1012/eureka,http://eureka-peer3:1013/eureka</span><br></pre></td></tr></table></figure><p>这个配置的试验就不再赘述，可以自行尝试</p><p>示例代码：<a href="https://git.oschina.net/jaychang/spring-cloud-demo.git" target="_blank" rel="noopener">https://git.oschina.net/jaychang/spring-cloud-demo.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Spring Cloud微服务全家桶之服务注册、服务发现(Eureka、Consul作为服务注册中心)文中，使用的是单点eureka注册中
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://jaychang.cn/categories/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="http://jaychang.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://jaychang.cn/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud微服务全家桶】01之服务注册、服务发现(Eureka、Consul作为服务注册中心)</title>
    <link href="http://jaychang.cn/2017/08/27/%E3%80%90Spring-Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6%E3%80%9101%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E3%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0-Eureka%E3%80%81Consul%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://jaychang.cn/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/</id>
    <published>2017-08-27T08:09:54.000Z</published>
    <updated>2018-01-22T15:53:55.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为微服务？"><a href="#何为微服务？" class="headerlink" title="何为微服务？"></a>何为微服务？</h1><p>Martin Fowler的《微服务》译文：<a href="https://skyao.gitbooks.io/learning-microservice/content/definition/Martin-Fowler/microservices.html" target="_blank" rel="noopener">https://skyao.gitbooks.io/learning-microservice/content/definition/Martin-Fowler/microservices.html</a></p><p>Martin Fowler的《微服务》原文：<a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></p><h1 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h1><p>Spring Cloud官方文档：<a href="http://projects.spring.io/spring-cloud/spring-cloud.html" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/spring-cloud.html</a></p><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p><p>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</p><p>Eureka：实际上在整个过程中维护者每个服务的生命周期。每一个服务都要被注册到Eureka服务器上，这里被注册到Eureka的服务又称为Client。Eureka通过心跳来确定服务是否正常。Eureka只做请求转发。同时Eureka是支持集群的呦！！！ （当然用其他的也是可以如consul,zookeeper）Zuul：类似于网关，反向代理。为外部请求提供统一入口。Ribbon/Feign：可以理解为调用服务的客户端。Hystrix：断路器，服务调用通常是深层的，一个底层服务通常为多个上层服务提供服务，那么如果底层服务失败则会造成大面积失败，Hystrix就是就调用失败后触发定义好的处理方法，从而更友好的解决出错。也是微服务的容错机制。</p><h1 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h1><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/01.png"><p>上图简要描述了Eureka的基本架构，由3个角色组成：</p><ul><li><p>Eureka Server：提供服务注册和发现</p></li><li><p>Service Provider：服务提供方，将自身服务注册到Eureka，从而使服务消费方能够找到</p></li><li><p>Service Consumer<em>：服务消费方，从Eureka获取注册服务列表，从而能够消费服务。</em></p><p>​</p><p><em>需要注意的是，上图中的3个角色都是逻辑角色。在实际运行中，这几个角色甚至可以是同一个实例，比如在我们项目中，Eureka Server和Service Provider就是同一个JVM进程。</em></p></li></ul><p>在创建服务注册中心前，我们先创建一个maven的pom父项目，然后在这个maven父项目里，使用Spring Initializr创建一个module。</p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/02.png"><p>发现在pom.xml已经自动生成了依赖，当然也可以创建一个普通的maven项目，将以下pom.xml的配置添加进去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改application.properties配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=registry-ms #服务名称</span><br><span class="line">server.port=1001</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=registry-ms.pay-inner.com #服务使用的主机名</span><br><span class="line">eureka.client.register-with-eureka=false #eureka本身无需注册到注册中心</span><br><span class="line">eureka.client.fetch-registry=false #eureka本身无需从注册中心获取服务注册实例</span><br></pre></td></tr></table></figure><p><em>通过eureka.client.register-with-eureka：false和fetch-registry：false来表明自己是一个eureka server</em></p><p>启动服务注册中心</p><p>启动类上加上 @EnableEurekaServer注解，表示开启Eureka注册中心服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RegistryApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到Instances currently registered with Eureka 还没有服务实例在线</p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/03.png"><h1 id="创建一个简单的服务提供者"><a href="#创建一个简单的服务提供者" class="headerlink" title="创建一个简单的服务提供者"></a>创建一个简单的服务提供者</h1><p>服务向注册中心注册完成后，服务的eureka client会告知注册中心它的元数据信息，例如ServiceId、主机名、URI、端口号等。Eureka Server接受每个Eureka客户端的心跳，当注册中心感知不到服务实例的存在时（比如心跳超时），那么该服务实例就会从注册中心中剔除。</p><p>创建一个SpringBoot应用，怎么创建的过程不再赘述，名为provider-service-ms，由于本例是服务注册、服务发现，可以写个打印所有服务实例服务方法。</p><p>创建完后，pom.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">        xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.choosefine&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;provider-ms&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;provider-ms&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http:<span class="comment">//maven.apache.org&lt;/url&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Dalston.SR1&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Dalston.SR1&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>通过注解@EnableDiscoveryClient 表明自己是一个Eureka Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个Rest Controller用于查看服务注册中心中注册的服务实例列表，DiscoveryClient提供了，获取服务列表的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderDemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"services"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">clientList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; serviceIds = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span>(String serviceId : serviceIds) &#123;</span><br><span class="line">            List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(serviceId);</span><br><span class="line">            <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">                System.out.println(<span class="string">"ServiceId:"</span> + instance.getServiceId() + <span class="string">",Host:"</span> + instance.getHost() + <span class="string">",Port:"</span> + instance.getPort() + <span class="string">",URI:"</span> + instance.getUri() + <span class="string">",MetaData:"</span> + instance.getMetadata());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serviceIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对application.properties做一些配置工作</p><p>spring.application.name是很重的一个配置，该名称会作为注册中心中服务实例的id(即ServiceId)，当其他服务需要调用此服务的时候，就需要知道此服务的ServiceId，eureka.client.serviceUrl.defaultZone 指明注册中心的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=2104</span><br><span class="line">spring.application.name=provider-ms</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://registry-ms.pay-inner.com:1001/eureka</span><br></pre></td></tr></table></figure><p>启动ProviderApplication，观察当前注册到eureka的服务实例，看到此时已经有名为PROVIDER-MS的服务实例上线了（Status为UP）。</p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/04.png"><p>也可以通过访问<a href="http://127.0.0.1:2103/services（provider-ms.pay-inner.com是为了访问方便，配了本地hosts域名解析），查看注册到eureka的服务实例。" target="_blank" rel="noopener">http://127.0.0.1:2103/services（provider-ms.pay-inner.com是为了访问方便，配了本地hosts域名解析），查看注册到eureka的服务实例。</a></p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/05.png"><p>控制台也打印了 ServiceId、Host、Port、URI这些信息</p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/06.png"><p>#将eureka改用consul实现服务注册</p><ul><li><p>Consul是什么</p><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对. 命令行超级好用的虚拟机管理软件 vgrant 也是 HashiCorp 公司开发的产品. 一致性协议采用 Raft 算法,用来保证服务的高可用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.</p></li><li><p>Consul有什么优势</p></li></ul><p>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.</p><p>​     支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.</p><p>​     支持健康检查. etcd 不提供此功能</p><p>​     支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议<strong> </strong>     官方提供web管理界面, etcd 无此功能 </p><p>只需要更换服务治理的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再将application.properties配置修改下，将eureka地址的配置注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=2103</span><br><span class="line">spring.application.name=provider-ms</span><br><span class="line">#eureka.client.serviceUrl.defaultZone=http://registry-ms.pay-inner.com:1001/eureka</span><br><span class="line">spring.cloud.consul.host=localhost</span><br><span class="line">spring.cloud.consul.port=8500</span><br></pre></td></tr></table></figure><p>由于Spring Cloud 对于DiscoveryClient已经做了一层抽象，我们无需关心eureka与consul不同的实现细节。而我们需要做的只是更改springcloud封装的不同服务治理依赖，以及在配置文件中配置不同的属性</p><p>将consul用dev模式启动。由于consul已经为我们提供了服务，无需像之前创建eureka那样创建服务注册中心，直接从consul官网下载服务端即可,<a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a></p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/07.png"><p>重新启动ProviderApplication</p><p>观察Consul UI（<a href="http://127.0.0.1:8500/ui/），是否有服务上线，可以看到PROVIDER-MS已经注册到consul了" target="_blank" rel="noopener">http://127.0.0.1:8500/ui/），是否有服务上线，可以看到PROVIDER-MS已经注册到consul了</a></p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/08.png"><p>通过访问<a href="http://127.0.0.1:2103/services" target="_blank" rel="noopener">http://127.0.0.1:2103/services</a></p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/09.png"><p>控制台也打印了 ServiceId、Host、Port、URI这些信息，这里也会把consul打印，因为默认是将consul本身也注册到服务注册中心</p><img src="/2017/08/27/【Spring-Cloud微服务全家桶】01之服务注册、服务发现-Eureka、Consul作为服务注册中心/10.png"><p>注意：这里看到<a href="http://XXXXXX:2103/health" target="_blank" rel="noopener">http://XXXXXX:2103/health</a> 404原因是少依赖了，pom.xml添加以下依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例代码：<a href="https://git.oschina.net/jaychang/spring-cloud-demo.git" target="_blank" rel="noopener">https://git.oschina.net/jaychang/spring-cloud-demo.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何为微服务？&quot;&gt;&lt;a href=&quot;#何为微服务？&quot; class=&quot;headerlink&quot; title=&quot;何为微服务？&quot;&gt;&lt;/a&gt;何为微服务？&lt;/h1&gt;&lt;p&gt;Martin Fowler的《微服务》译文：&lt;a href=&quot;https://skyao.gitbooks.
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://jaychang.cn/categories/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="http://jaychang.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
